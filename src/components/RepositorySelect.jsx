import {useState, useEffect} from 'react';
import api from "../api/axiosInstance.js";

const RepositorySelect = ({selectedProject, onSelectRepository}) => {
    const [repositories, setRepositories] = useState([]);
    const [selectedRepo, setSelectedRepo] = useState("");

    useEffect(()=>{
        if(!selectedProject) return;
        
        // üö® ÏàòÏ†ïÎêú Î∂ÄÎ∂Ñ: projectNoForApi Î≥ÄÏàòÎ•º ÎßåÎì§Ïñ¥ ÏΩúÎ°† Ïù¥Ï†Ñ Î∂ÄÎ∂ÑÎßå ÏÇ¨Ïö©
        const projectNoForApi = selectedProject.split(':')[0];
        
        const fetchRepos = async() =>{
            try{
                // Í≤ΩÎ°ú: DashBoard.jsxÏùò ÏÑ±Í≥µ Í≤ΩÎ°ú Íµ¨Ï°∞Ïù∏ '/portal/pt/'Î•º Îî∞Î¶Ñ
                const res = await api.get(`/portal/tool/toolLink/getSrchOption`, {
                    params: {
                        projectNo: projectNoForApi // Ï†ïÏ†úÎêú ÌîÑÎ°úÏ†ùÌä∏ Î≤àÌò∏ ÏÇ¨Ïö©
                    }
                });
                
                // Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ Î≥¥Í∞ï (res.data.list ÎòêÎäî res.data)
                const repoList = Array.isArray(res.data) 
                                 ? res.data 
                                 : Array.isArray(res.data?.list) ? res.data.list : [];
                
                console.log("Î†àÌè¨ÏßÄÌÜ†Î¶¨ API ÏùëÎãµ Ï†ÑÏ≤¥:", res.data); 
                console.log("Ï∂îÏ∂úÎêú Î†àÌè¨ÏßÄÌÜ†Î¶¨ Î™©Î°ù:", repoList); 

                if(repoList.length > 0){
                    setRepositories(repoList);
                    
                    const initialRepoName = repoList[0]?.repositoryName || "";
                    setSelectedRepo(initialRepoName);

                    if(initialRepoName){
                        onSelectRepository(initialRepoName);
                    }
                } else {
                    setRepositories([]);
                    setSelectedRepo("");
                    onSelectRepository("");
                }
            } catch(err){
                console.error("Î†àÌè¨ÏßÄÌÜ†Î¶¨ Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:", err); 
            }
        };
        fetchRepos();
    }, [selectedProject, onSelectRepository]);

    const handleSelect = (e) =>{
        const repoName = e.target.value;
        setSelectedRepo(repoName);
        onSelectRepository(repoName);
    };

    return (
        <div className="repo-selector">
            <label>Î†àÌè¨ÏßÄÌÜ†Î¶¨</label>
            <select value={selectedRepo} onChange={handleSelect}>
                {repositories.map((repo) => (
                    <option key={repo.repositoryNo} value={repo.repositoryName}>
                        {repo.repositoryName}
                    </option>
                ))}
            </select>
        </div>
    )
}
export default RepositorySelect;